namespace Lessons
{
    public class GameobjectsComponents5
    {
    }
    // когда подходит компонентный подход и когда нет и нужно ООП
    // ООП
    //  напишем фасад (англ. Facade) для Character (интерфейс к сложной системе классов) еще есть Enemy
    // через него с помощью событий мы сможем вызывать и получить доступ к методам и полям нашего героя
    // мы оборачиваем все методами свойствами и ивентами
    // реализуем контроллер для взаимодействия MoveController, взаимодействие будет реализовано через нашу обертку Character
    //CharacterMoveController добавляем на объект на сцене Controller
    // Проблема. если на другом уровне нам надо играть за другой кубик, то нам надо еще один MoveController
    // реализуем для Enemy тоже перемещение, надо добавить механику Move, добавляем в Enemy логику перемещения
    // добавим для Enemy EnemyMoveController и добавим его на объект Controller
    // появившееся проблемы: дублирование кода, (аналогичная проблема будет с респауном, атакой и прочим)
    // для решения проблемы вынесем логику в AbstractMoveController
    // CharacterMoveController и EnemyMoveController будут наследоваться от AbstractMoveController - вынесли общую логику
    // остается проблема в реализации отдельных классов для перемещения, будет много кода
    // как сделать чтобы можно было переиспользовать код?
    // 




}