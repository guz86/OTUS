namespace Lessons
{
    public class GameObjectsCore
    {
        
    }
    
    // организация проекта
    // game - meta - метамеханики в игре
    // каждая папка модульная, при удалении, проект продолжает работать = В папке Конфиги, Скрипты, Префабы, Контент
    
    // Основы механик игровых объектов
    
    // ядро: здоровье, получение урона, смерть, атака
    
    // Примитивные механики
    // Число int float - здоровье персонажа, линейная скорость
    // координаты transform - перемещение в пространстве
    // состояние bool enum - гибель, переключение состояние бегал, прыгал, вкл выкл подсказку
    // таймер писать класс timer - кулдаун для атаки
    // событие event - гибель персонажа, выстрел из оружия
    // коллизия collider - персонаж входит в зону тригера, столновение объекта 
    
    
    //механика получения урона это какое-то событие
    
    // здоровье это некий элемент с int
    // нужен элемент который будет хранить числа
    // IntBehaviour добавляется к HitPoints Объекту
    // EventReceiver - некий триггер с помощью которого можем вызывать событие
    // добавляем на TakeDamage Объект
    // хотим вызывать метод из EventReceiver в инспекторе
    // для этого есть плагин OdinInspector из кода [Button] добавлет кнопку
    // соединяем два элемента механикой TakeDamageMechanics через Observer
    // TakeDamageMechanics с EventReceiver будет висеть на объекте TakeDamage
    // в TakeDamage передаем EventReceiver (TakeDamage) и IntBehaviour (HitPoints) - связываем
    // По вызову Call() механика будет уменьшать здоровье
    
    // механика смерти по событию  -- Death + DeathMechanics.cs, EventReceiver.cs
    // К объекту Death добавляем новую механику DeathMechanics
    // где будем подписывать
    // из HitPoints - IntBehaviour - OnValueChanged наш метод OnHitPointsChanged 
    // OnHitPointsChanged будет выполнять проверку Value и вызывать при хп 0 Call() в ресивере 






}